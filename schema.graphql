# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

type Ancestor {
    position: Int
    slugUrl: String
    title: String
    uuid: String
}

"Debugging information for the current query."
type DjangoDebug {
    "Executed SQL queries for this API query."
    sql: [DjangoDebugSQL]
}

"Represents a single database query made to a Django managed DB."
type DjangoDebugSQL {
    "The Django database alias (e.g. 'default')."
    alias: String!
    "Duration of this database query in seconds."
    duration: Float!
    "Postgres connection encoding if available."
    encoding: String
    "Whether this database query was a SELECT."
    isSelect: Boolean!
    "Whether this database query took more than 10 seconds."
    isSlow: Boolean!
    "Postgres isolation level if available."
    isoLevel: String
    "JSON encoded database query parameters."
    params: String!
    "The raw SQL of this query, without params."
    rawSql: String!
    "The actual SQL sent to this database."
    sql: String
    "Start time of this database query."
    startTime: Float!
    "Stop time of this database query."
    stopTime: Float!
    "Postgres transaction ID if available."
    transId: String
    "Postgres transaction status if available."
    transStatus: String
    "The type of database being used (e.g. postrgesql, mysql, sqlite)."
    vendor: String!
}

type Document implements Node {
    ancestors: [Ancestor]
    children(after: String, before: String, first: Int, last: Int, level: Int, slugUrl: String, uuid: UUID): DocumentConnection!
    collaborators: [Users]
    hasChildren: Boolean
    icon: String
    "The ID of the object."
    id: ID!
    level: Int!
    lft: Int!
    parent: Document
    rght: Int!
    slug: String!
    slugUrl: String!
    text: String!
    title: String!
    treeId: Int!
    uuid: UUID!
}

type DocumentConnection {
    "Contains the nodes in this connection."
    edges: [DocumentEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `Document` and its cursor."
type DocumentEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Document
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Query {
    _debug: DjangoDebug
    "The ID of the object"
    document(id: ID!): Document
    documents(after: String, before: String, first: Int, last: Int, level: Int, slugUrl: String, uuid: UUID): DocumentConnection
}

type Users {
    dateJoined: DateTime!
    email: String!
    firstName: String!
    "Designates whether the user can log into this admin site."
    isStaff: Boolean!
    lastName: String!
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}


"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime
